---
export const prerender = false;

import Layout from "@/layouts/Layout.astro";
import SingleWeatherCard from "@/components/SingleWeatherCard.astro";
import WeatherChart from "@/components/WeatherChart.jsx";

const env = import.meta.env;
let res = await fetch(
	`https://api.openweathermap.org/data/2.5/weather?lat=51.264018&lon=7.1780374&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const currentWeather = await res.json();

const time = new Date();
const currentTime = time.toLocaleTimeString("de-DE", {
	timeZone: "Europe/Berlin",
	hour: "2-digit",
	minute: "2-digit",
	hour12: false,
});
const currentDate = time.toLocaleDateString("de-DE", {
	weekday: "long",
	month: "long",
	day: "numeric",
});

res = await fetch(
	`https://api.openweathermap.org/data/2.5/forecast/daily?lat=51.264018&lon=7.1780374&cnt=8&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const weeklyWeather = await res.json();

res = await fetch(
	`https://api.openweathermap.org/data/2.5/forecast/hourly?lat=51.264018&lon=7.1780374&cnt=24&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const hourlyWeather = await res.json();

const hourlyChartLabels = hourlyWeather.list.map((h) =>
	formatToBerlinTime(h.dt)
);
const hourlyTemperatures = hourlyWeather.list.map((h) =>
	Math.round(h.main.temp)
);
const hourlyPrecipitation = hourlyWeather.list.map((h) => {
	if (h.rain) {
		return h.rain["1h"];
	} else {
		return 0;
	}
});

const oneCallApiKey = "5796abbde9106b7da4febfae8c44c232";
res = await fetch(
	`https://api.openweathermap.org/data/2.5/onecall?lat=51.26401&lon=7.1780374&units=metric&appid=${oneCallApiKey}`
);
const oneCall = await res.json();

const hourlyUVIndex = oneCall.hourly.slice(0, 24).map((h) => {
	if (h.uvi) {
		return Math.round(h.uvi);
	} else {
		return 0;
	}
});

function formatToBerlinTime(unixTimestamp) {
	const date = new Date(unixTimestamp * 1000); // Convert to ms
	return date.toLocaleTimeString("de-DE", {
		timeZone: "Europe/Berlin",
		hour: "2-digit",
		minute: "2-digit",
		hour12: false,
	});
}

function formatToBerlinDate(unixTimestamp) {
	const date = new Date(unixTimestamp * 1000); // Convert to ms
	return date.toLocaleDateString("de-DE", {
		timeZone: "Europe/Berlin",
		weekday: "short",
	});
}

function meterToKm(m) {
	return m / 1000;
}
---

<Layout>
	<main
		class="flex flex-col items-center h-screen bg-gradient-to-b from-rose-50 to-rose-200 text-slate-950">
		<header
			class="w-full bg-rose-50 p-4 flex justify-between items-center shadow-md">
			<h1 class="text-4xl font-semibold text-slate-950">
				🌤 Wetter Wuppertal
			</h1>
			<p class="text-slate-950 text-4xl font-semibold">
				🔃 {currentTime} - {currentDate}
			</p>
		</header>

		<div class="flex flex-col gap-12">
			<section class="flex gap-8 items-center mt-8">
				<div class="flex items-center gap-8">
					<div class="flex flex-col items-center -mt-12">
						<img
							class="w-64 h-64"
							src=`https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@4x.png`
						/>
						<p class="-mt-12 text-4xl font-semibold">
							{currentWeather.weather[0].description}
						</p>
					</div>
					<div class="flex flex-col items-center">
						<p class="text-9xl font-semibold">
							{Math.round(currentWeather.main.temp)}°C
						</p>
						<p class="text-4xl">
							Gefühlt:
							<span class="text-5xl">
								{Math.round(currentWeather.main.feels_like)}°C
							</span>
						</p>
					</div>
				</div>
				<div class="grid grid-cols-2 grid-rows-4 text-4xl">
					<div class="flex">
						<span>🌡️</span>
						Min: {Math.round(weeklyWeather.list[0].temp.min)}°C
					</div>
					<div class="flex">
						<span>🌡️</span>
						Max: {Math.round(weeklyWeather.list[0].temp.max)}°C
					</div>
					<div class="flex">
						<span>🌅</span>
						<p>
							Sonnenaufgang: {
								formatToBerlinTime(currentWeather.sys.sunrise)
							}
						</p>
					</div>
					<div class="flex">
						<span>🌄</span>
						<p>
							Sonnenuntergang: {
								formatToBerlinTime(currentWeather.sys.sunset)
							}
						</p>
					</div>
					<div class="flex">
						<span>🍃</span>
						Wind: {currentWeather.wind.speed} m/s
					</div>
					<div class="flex">
						<span>💧</span>
						Luftfeuchtigkeit: {currentWeather.main.humidity}%
					</div>
					<div class="flex">
						<span>💨</span>
						Luftdruck: {currentWeather.main.pressure} hPa
					</div>
					<div class="flex">
						<span>☀️</span>
						UV-Index: {Math.round(oneCall.current.uvi)}
						<!-- 1-2 Niedrig | 3-5 Mittel, 6-7 Hoch | 8-10 Sehr hoch, 11+ Extrem -->
					</div>
					<div class="flex">
						<span>👓</span>
						Sicht: {meterToKm(currentWeather.visibility)} km
					</div>
					<div class="flex">
						<span>☁️</span>
						Wolken: {currentWeather.clouds.all}%
					</div>
				</div>
			</section>

			<section class="w-full">
				<div class="flex items-center justify-center">
					<WeatherChart
						client:load
						labels={hourlyChartLabels}
						temperatureData={hourlyTemperatures}
						precipitationData={hourlyPrecipitation}
						uviData={hourlyUVIndex}
					/>
				</div>
			</section>

			<section class="flex flex-col gap-4">
				<div class="flex justify-between gap-4">
					{
						weeklyWeather.list
							.slice(1)
							.map((item) => (
								<SingleWeatherCard
									title={formatToBerlinDate(item.dt)}
									temperature={Math.round(item.temp.day)}
									icon={item.weather[0].icon}
								/>
							))
					}
				</div>
			</section>
		</div>

		<p id="countdown" class="absolute left-4 bottom-4 text-slate-900">
			10:00
		</p>

		<script>
			let seconds = 600;
			const countdownEl = document.getElementById("countdown");
			function updateCountdown() {
				const min = Math.floor(seconds / 60);
				const sec = seconds % 60;
				countdownEl.textContent = `${min}:${sec.toString().padStart(2, "0")}`;
			}
			updateCountdown();
			const interval = setInterval(() => {
				seconds--;
				updateCountdown();
				if (seconds <= 0) {
					clearInterval(interval);
					window.location.reload();
					console.log("Reloading...");
				}
			}, 1000);
		</script>
	</main>
</Layout>

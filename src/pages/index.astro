---
export const prerender = false;

import Layout from "@/layouts/Layout.astro";
import SingleWeatherCard from "@/components/SingleWeatherCard.astro";
import WeatherChart from "@/components/WeatherChart.jsx";
import {
	IconSunrise,
	IconSunset,
	IconTemperaturePlus,
	IconTemperatureMinus,
	IconWindsockFilled,
	IconDroplet,
	IconGauge,
	IconUvIndex,
	IconBinoculars,
	IconCloud,
	IconRefresh,
	IconReload,
} from "@tabler/icons-react";

const env = import.meta.env;
let res = await fetch(
	`https://api.openweathermap.org/data/2.5/weather?lat=51.264018&lon=7.1780374&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const currentWeather = await res.json();

const time = new Date();
const currentTime = time.toLocaleTimeString("de-DE", {
	timeZone: "Europe/Berlin",
	hour: "2-digit",
	minute: "2-digit",
	second: "2-digit",
	hour12: false,
});
const currentDate = time.toLocaleDateString("de-DE", {
	weekday: "long",
	month: "long",
	day: "numeric",
});

res = await fetch(
	`https://api.openweathermap.org/data/2.5/forecast/daily?lat=51.264018&lon=7.1780374&cnt=8&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const weeklyWeather = await res.json();

res = await fetch(
	`https://api.openweathermap.org/data/2.5/forecast/hourly?lat=51.264018&lon=7.1780374&cnt=24&lang=DE&units=metric&appid=${env.OPENWEATHERMAP_API_KEY}`
);
const hourlyWeather = await res.json();

const hourlyChartLabels = hourlyWeather.list.map((h) =>
	formatToBerlinTime(h.dt)
);
const hourlyTemperatures = hourlyWeather.list.map((h) =>
	Math.round(h.main.temp)
);
const hourlyPrecipitation = hourlyWeather.list.map((h) => {
	if (h.rain) {
		return h.rain["1h"];
	} else {
		return 0;
	}
});

const oneCallApiKey = "5796abbde9106b7da4febfae8c44c232";
res = await fetch(
	`https://api.openweathermap.org/data/2.5/onecall?lat=51.26401&lon=7.1780374&units=metric&appid=${oneCallApiKey}`
);
const oneCall = await res.json();

const hourlyUVIndex = oneCall.hourly.slice(1, 25).map((h) => {
	if (h.uvi) {
		return Math.round(h.uvi);
	} else {
		return 0;
	}
});

function formatToBerlinTime(unixTimestamp) {
	const date = new Date(unixTimestamp * 1000); // Convert to ms
	return date.toLocaleTimeString("de-DE", {
		timeZone: "Europe/Berlin",
		hour: "2-digit",
		minute: "2-digit",
		hour12: false,
	});
}

function formatToBerlinDate(unixTimestamp) {
	const date = new Date(unixTimestamp * 1000); // Convert to ms
	return date.toLocaleDateString("de-DE", {
		timeZone: "Europe/Berlin",
		weekday: "short",
	});
}

function meterToKm(m) {
	return m / 1000;
}

const hour = new Date().getHours();
// const isNight = hour >= 20 || hour < 6;
const isNight = false;
const colors = [
	"text-red-950",
	"text-orange-950",
	"text-amber-950",
	"text-yellow-950",
	"text-lime-950",
	"text-green-950",
	"text-emerald-950",
	"text-teal-950",
	"text-cyan-950",
	"text-sky-950",
	"text-blue-950",
	"text-indigo-950",
	"text-violet-950",
	"text-purple-950",
	"text-fuchsia-950",
	"text-pink-950",
	"text-rose-950",
	"text-slate-950",
	"text-gray-950",
	"text-zinc-950",
	"text-neutral-950",
	"text-stone-950",
];
const darkColors = [
	"text-red-100",
	"text-orange-100",
	"text-amber-100",
	"text-yellow-100",
	"text-lime-100",
	"text-green-100",
	"text-emerald-100",
	"text-teal-100",
	"text-cyan-100",
	"text-sky-100",
	"text-blue-100",
	"text-indigo-100",
	"text-violet-100",
	"text-purple-100",
	"text-fuchsia-100",
	"text-pink-100",
	"text-rose-100",
	"text-slate-100",
	"text-gray-100",
	"text-zinc-100",
	"text-neutral-100",
	"text-stone-100",
];
---

<Layout>
	<main
		class:list={[
			"flex flex-col items-center h-screen",
			{
				[`bg-gradient-to-b from-slate-800 to-slate-950 ${darkColors[Math.floor(Math.random() * colors.length)]}`]:
					isNight,
				[`bg-gradient-to-b from-stone-100 to-stone-300 ${colors[Math.floor(Math.random() * colors.length)]}`]:
					!isNight,
			},
		]}>
		<header class="w-full p-4 flex justify-between leading-none shadow-md">
			<h1 class="text-4xl font-semibold flex items-center gap-4">
				<img
					src="https://www.svgrepo.com/show/530233/weather.svg"
					class="size-12"
				/> Wetter Wuppertal
			</h1>
			<p class="text-4xl font-semibold flex items-center gap-4">
				<IconReload size="32" className="-mb-1" />
				{currentTime} - {currentDate}
			</p>
		</header>

		<div class="flex flex-col gap-12 w-full">
			<section class="flex gap-8 items-center justify-evenly mt-8">
				<div class="flex items-center gap-8">
					<div class="flex flex-col items-center -mt-16">
						<img
							class="size-130 -mt-12 drop-shadow-md object-contain"
							src=`https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@4x.png`
						/>
						<p class="-mt-24 text-4xl font-semibold">
							{currentWeather.weather[0].description}
						</p>
					</div>
					<div
						class="flex flex-col items-center justify-evenly self-stretch">
						<div>
							<p class="text-9xl font-semibold">
								{Math.round(currentWeather.main.temp)}°C
							</p>
							<p class="text-4xl">
								Gefühlt:
								<span class="text-5xl font-semibold">
									{
										Math.round(
											currentWeather.main.feels_like
										)
									}°C
								</span>
							</p>
						</div>
						<div
							class="grid grid-cols-2 text-xl gap-x-8 font-semibold">
							<div class="flex items-center">
								<span><IconTemperatureMinus size={48} /></span>
								<div
									class="flex flex-col justify-center items-center w-full">
									Min:
									<span class="text-4xl font-bold">
										{
											Math.round(
												weeklyWeather.list[0].temp.min
											)
										}<span class="text-2xl">°C</span>
									</span>
								</div>
							</div>
							<div class="flex items-center">
								<span><IconTemperaturePlus size={48} /></span>
								<div
									class="flex flex-col justify-center items-center w-full">
									Max:
									<span class="text-4xl font-bold">
										{
											Math.round(
												weeklyWeather.list[0].temp.max
											)
										}<span class="text-2xl">°C</span>
									</span>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div
					class="grid grid-cols-2 grid-rows-4 text-lg font-semibold gap-x-16 gap-y-4">
					<div class="flex items-center">
						<span><IconSunrise size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Sonnenaufgang:
							<span class="text-4xl font-bold">
								{formatToBerlinTime(currentWeather.sys.sunrise)}
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconSunset size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Sonnenuntergang:
							<span class="text-4xl font-bold">
								{formatToBerlinTime(currentWeather.sys.sunset)}
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconWindsockFilled size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Wind:
							<span class="text-4xl font-bold">
								{currentWeather.wind.speed}<span
									class="text-2xl">m/s</span
								>
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconDroplet size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Luftfeuchtigkeit:
							<span class="text-4xl font-bold">
								{currentWeather.main.humidity}<span
									class="text-2xl">%</span
								>
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconGauge size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Luftdruck:
							<span class="text-4xl font-bold">
								{currentWeather.main.pressure}<span
									class="text-2xl">hPa</span
								>
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconUvIndex size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							UV-Index:
							<span class="text-4xl font-bold">
								{Math.round(oneCall.current.uvi)}
							</span>
						</div>
						<!-- 1-2 Niedrig | 3-5 Mittel, 6-7 Hoch | 8-10 Sehr hoch, 11+ Extrem -->
					</div>
					<div class="flex items-center">
						<span><IconBinoculars size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Sicht:
							<span class="text-4xl font-bold">
								{meterToKm(currentWeather.visibility)}<span
									class="text-2xl">km</span
								>
							</span>
						</div>
					</div>
					<div class="flex items-center">
						<span><IconCloud size={48} /></span>
						<div
							class="flex flex-col justify-center items-center w-full">
							Wolken:
							<span class="text-4xl font-bold">
								{currentWeather.clouds.all}<span
									class="text-2xl">%</span
								>
							</span>
						</div>
					</div>
				</div>
			</section>

			<section
				class="w-full flex items-center justify-center max-w-screen-xl mx-auto">
				<WeatherChart
					client:load
					labels={hourlyChartLabels}
					temperatureData={hourlyTemperatures}
					precipitationData={hourlyPrecipitation}
					uviData={hourlyUVIndex}
				/>
			</section>

			<section class="flex gap-4 justify-between max-w-screen-xl mx-auto">
				{
					weeklyWeather.list
						.slice(1)
						.map((item) => (
							<SingleWeatherCard
								title={formatToBerlinDate(item.dt)}
								temperature={Math.round(item.temp.day)}
								icon={item.weather[0].icon}
							/>
						))
				}
			</section>
		</div>

		<p id="countdown" class="absolute left-4 bottom-4 text-slate-900">
			10:00
		</p>

		<script>
			let seconds = 600;
			const countdownEl = document.getElementById("countdown");
			function updateCountdown() {
				const min = Math.floor(seconds / 60);
				const sec = seconds % 60;
				countdownEl.textContent = `${min}:${sec.toString().padStart(2, "0")}`;
			}
			updateCountdown();
			const interval = setInterval(() => {
				seconds--;
				updateCountdown();
				if (seconds <= 0) {
					clearInterval(interval);
					window.location.reload();
					console.log("Reloading...");
				}
			}, 1000);
		</script>
	</main>
</Layout>
